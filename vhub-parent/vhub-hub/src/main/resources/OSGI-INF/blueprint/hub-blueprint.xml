<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.3.0"
	xmlns:jaxrs="http://cxf.apache.org/blueprint/jaxrs" xmlns:cxf="http://cxf.apache.org/blueprint/core"
	xmlns:camel="http://camel.apache.org/schema/blueprint" xmlns:camel-cxf="http://camel.apache.org/schema/blueprint/cxf"
	xsi:schemaLocation="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.3.0 http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.3.0.xsd
	http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint-2.16.3.xsd
	http://cxf.apache.org/blueprint/jaxrs http://cxf.apache.org/schemas/blueprint/jaxrs.xsd
http://cxf.apache.org/blueprint/core http://cxf.apache.org/schemas/blueprint/core.xsd
http://camel.apache.org/schema/blueprint/cxf http://camel.apache.org/schema/cxf/camel-cxf-2.16.3-blueprint.xsd">

	<cm:property-placeholder id="vhubHubProperties"
		persistent-id="com.virtusa.vhub.vhub_hub" update-strategy="reload">
		<cm:default-properties>
			<cm:property name="mq.brokerURL" value="tcp://localhost:61616" />
			<cm:property name="mq.userName" value="karaf" />
			<cm:property name="mq.password" value="karaf" />
		</cm:default-properties>
	</cm:property-placeholder>

	<bean id="connectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="${mq.brokerURL}" />
		<property name="userName" value="${mq.userName}" />
		<property name="password" value="${mq.password}" />
	</bean>

	<bean id="jmscomp" class="org.apache.camel.component.jms.JmsComponent">
		<property name="connectionFactory" ref="connectionFactory" />
	</bean>

	<bean id="commandResponseAggregationStrategy"
		class="com.virtusa.vhub.hub.camel.processor.CommandResponseAggregationStrategy" />

	<bean id="jaxbContext" class="javax.xml.bind.JAXBContext"
		factory-method="newInstance">
		<argument>
			<list>
				<value>com.virtusa.vhub.common.entity.CommandExecutionStatus</value>
				<value>com.virtusa.vhub.common.entity.CommandRequestEntity</value>
				<value>com.virtusa.vhub.common.entity.CommandResponseEntity</value>
			</list>
		</argument>
	</bean>

	<bean id="jaxbDataFormat" class="org.apache.camel.converter.jaxb.JaxbDataFormat">
		<argument ref="jaxbContext" />
		<!-- <property name="mustBeJAXBElement" value="false"/> -->
	</bean>

	<camel-cxf:rsServer id="rsServer" address="/vhub/hub"
		serviceClass="com.virtusa.vhub.hub.CommandRouterResource"
		loggingFeatureEnabled="true">
	</camel-cxf:rsServer>

	<camelContext id="commandRouterContext"
		xmlns="http://camel.apache.org/schema/blueprint">
		<!-- <camel:propertyPlaceholder location="blueprint:vhubHubProperties" 
			/> -->
		<camel:dataFormats>
			<camel:json id="jsonDataFormat" library="Jackson"
				unmarshalTypeName="com.virtusa.vhub.common.entity.CommandResponseEntity" />
			<camel:xmljson id="xmlJsonDataFormat" />
			<camel:string />
		</camel:dataFormats>

		<!-- Route - Partner to Hub -->
		<camel:route id="commnandInRoute">
			<camel:from uri="cxfrs://bean://rsServer?bindingStyle=SimpleConsumer"
				id="consumeCommandRequestFromPartner" />
			<camel:doTry>
				<camel:to uri="validator:CommadRouter.xsd" id="validateCommandRequest" />
				<camel:validate id="checkIfThrowExceptionAtHubHeaderIsTrue">
					<camel:simple>${in.header.ThrowExceptionAtHub} != 'true'</camel:simple>
				</camel:validate>
				<camel:choice id="branchByCommandType">
					<camel:when id="ifCommandTypeIsCommand1">
						<camel:simple>$simple{header.CommandType} == 'COMMAND1'</camel:simple>
						<camel:to uri="direct:consumer1-in" />
					</camel:when>
					<camel:when id="ifCommandTypeIsCommand2">
						<camel:simple>$simple{header.CommandType} == 'COMMAND2'</camel:simple>
						<camel:to uri="direct:consumer2-in" />
					</camel:when>
					<camel:when id="ifCommandTypeIsCommand3">
						<camel:simple>$simple{header.CommandType} == 'COMMAND3'</camel:simple>
						<camel:multicast strategyRef="commandResponseAggregationStrategy"
							parallelProcessing="true" parallelAggregate="true" streaming="true"
							stopOnException="false" id="multicastCommandToConsumers">
							<camel:to uri="direct:consumer2-in" id="to-direct-consumer2" />
							<camel:to uri="direct:consumer3-in" id="to-direct-consumer3" />
						</camel:multicast>
					</camel:when>
					<camel:otherwise id="otherwiseThrowAnException">
						<camel:throwException exceptionType="org.apache.camel.CamelException"
							message="Invalid CommandType $simple{header.CommandType}"></camel:throwException>
					</camel:otherwise>
				</camel:choice>
				<camel:doCatch id="catchValidationException">
					<exception>org.apache.camel.ValidationException</exception>
					<exception>org.apache.camel.processor.validation.SchemaValidationException</exception>
					<camel:to uri="log:EXCEPTION?level=ERROR&amp;showAll=true" />
					<!-- <camel:setBody> <camel:simple> ${ref:exception400Response} </camel:simple> 
						</camel:setBody> -->
					<camel:bean
						beanType="com.virtusa.vhub.hub.util.CommandExceptionResponseUtil"
						method="getExcpetionResponse($simple{exception})" id="excpetionResponse" />
				</camel:doCatch>
				<camel:doCatch id="catchOtherCamelExceptions">
					<camel:exception>org.apache.camel.CamelException</camel:exception>
					<camel:to uri="log:EXCEPTION?level=ERROR&amp;showAll=true" />
					<!-- <camel:setBody> <camel:simple> ${ref:excpetionResponse} </camel:simple> 
						</camel:setBody> -->
					<camel:bean
						beanType="com.virtusa.vhub.hub.util.CommandExceptionResponseUtil"
						method="getExcpetionResponse($simple{exception})" id="excpetionResponse" />
				</camel:doCatch>
			</camel:doTry>
		</camel:route>

		<!-- Routes - Hub to Consumer and Initial response from Consumer to Hub 
			and to Partner -->
		<camel:route id="directToConsumer1">
			<camel:from uri="direct:consumer1-in" />
			<camel:marshal ref="jaxbDataFormat" />
			<camel:to
				uri="jmscomp:{{queue.consumer1.req}}?jmsMessageType=Text&amp;replyTo={{queue.consumer1.res}}" />
			<camel:unmarshal ref="jaxbDataFormat" />
		</camel:route>
		<camel:route id="directToConsumer2">
			<camel:from uri="direct:consumer2-in" />
			<camel:marshal ref="jsonDataFormat" />
			<camel:to
				uri="jmscomp:{{queue.consumer2.req}}?jmsMessageType=Text&amp;replyTo={{queue.consumer2.res}}&amp;useMessageIDAsCorrelationID=true" />
			<camel:unmarshal ref="jsonDataFormat" />
		</camel:route>
		<camel:route id="directToConsumer3">
			<camel:from uri="direct:consumer3-in" />
			<camel:marshal ref="jaxbDataFormat" />
			<camel:to
				uri="jmscomp:{{queue.consumer3.req}}?jmsMessageType=Text&amp;replyTo={{queue.consumer3.res}}" />
			<camel:unmarshal ref="jaxbDataFormat" />
		</camel:route>

		<!-- Routes - Consumer to Hub and to Partner -->
		<camel:route id="consumer1ToPartner">
			<camel:from
				uri="jmscomp:{{queue.consumer1.res}}?selector=AckType='FINAL'" />
			<!-- <camel:setHeader headerName="Exchange.HTTP_URI"> <camel:simple>$simple{header.CommandCallBackUrl}</camel:simple> 
				</camel:setHeader> -->
			<camel:toD uri="http4://$simple{header.CommandCallBackUrl}" />
		</camel:route>
		<camel:route id="consumer2ToPartner">
			<camel:from
				uri="jmscomp:{{queue.consumer2.res}}?selector=AckType='FINAL'" />
			<camel:unmarshal ref="jsonDataFormat" />
			<camel:toD uri="http4://$simple{header.CommandCallBackUrl}" />
		</camel:route>
		<camel:route id="consumer3ToPartner">
			<camel:from
				uri="jmscomp:{{queue.consumer3.res}}?selector=AckType='FINAL'" />
			<camel:toD uri="http4://$simple{header.CommandCallBackUrl}" />
		</camel:route>
	</camelContext>

</blueprint>
